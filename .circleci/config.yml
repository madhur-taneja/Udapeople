version: 2.1
orbs:
    node: circleci/node@1.1.6
jobs:
    # Configuring Infrastructure
    configuring-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                  fingerprints: ["25:f3:77:b4:e3:a0:93:17:29:ed:8c:56:b9:c8:2d:a8"] # You can get this ID in the section where you registered the SSH Key
            - run:
                  name: Install dependencies
                  command: |
                      apk add --update ansible # install the dependencies needed for your playbook
            - run:
                  name: configuring server
                  command: | 
                      cd .circleci/ansible && ansible-playbook -i inventory playbook.yml -c paramiko -u deploy

    # Creating Inventory with new EC2's IP address
    creating-inventory:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Get the IP Address of the EC2 instance 
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --output text >> inventory
            - run:
                name: Storing the Backend IP Address to Memstash as frontend needs it 
                command: |
                    ip_address=$(tail -n 1 inventory)
                    curl -H "Content-Type: text/plain" -H "token: c20424ec-3f12-4c18-87f3-4ce676c7e8ae" --request PUT --data $ip_address https://api.memstash.io/values/backend

    # Creating Infrastructure
    creating-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Ensure Frontend & Backend infrastructure exist
                  command: |
                      aws cloudformation create-stack \
                          --template-body file://.circleci/files/backend.yml \
                          --stack-name udapeople-backend-stack \
                          --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
                      aws cloudformation create-stack \
                          --template-body file://.circleci/files/frontend.yml \
                          --stack-name udapeople-frontend-stack \
                          --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                  name: Ensure Cloudfront and Network infrastructure exist
                  command: |
                      aws cloudformation create-stack \
                          --template-body file://.circleci/files/cloudfront.yml \
                          --stack-name udapeople-cloudfront-stack \
                          --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
                      aws cloudformation create-stack \
                          --template-body file://.circleci/files/network.yml \
                          --stack-name udapeople-network-stack \
                          --parameters ParameterKey=EnvironmentName,ParameterValue=${UdaPeople-Env}
            - run:
                name: Rollback Frontend & Backend infrastructure
                when: on_fail
                command: |
                      aws cloudformation delete-stack --stack-name udapeople-backend-stack
                      aws cloudformation delete-stack --stack-name udapeople-frontend-stack  
            - run:
                name: Rollback Cloudfront and Network infrastructure
                when: on_fail
                command: |       
                      aws cloudformation delete-stack --stack-name udapeople-cloudfront-stack
                      aws cloudformation delete-stack --stack-name udapeople-network-stack

    # Analyzing Code
    analyzing-backend:
        executor:
            name: node/default
        steps:
            - checkout
            - run: cd backend && npm i && npm audit fix --audit-level=critical --force
    analyzing-frontend:
        executor:
            name: node/default
        steps:
            - checkout
            - run: cd frontend && npm i && npm audit fix --audit-level=critical --force

    # Testing Code
    testing-frontend:
        executor:
            name: node/default
        steps:
            - checkout
            - run: cd frontend && npm i && npm run test

    testing-backend:
        executor:
            name: node/default
        steps:
            - checkout
            - run: cd backend && npm i && npm run test

    # Building Code
    building-frontend:
        executor:
            name: node/default
        steps:
            - checkout
            - run: cd frontend && npm i && npm run build

    building-backend:
        executor:
            name: node/default
        steps:
            - checkout
            - run: cd backend && npm i && npm run build

workflows:
    analyzing-testing-building-deploying:
        jobs:
            # Running Analysis Jobs
            # - analyzing-backend
            # - analyzing-frontend

            # Running Test Jobs
            # - testing-frontend:
            #     requires:
            #         - analyzing-frontend
            # - testing-backend:
            #     requires:
            #         - analyzing-backend

            # Running Build Jobs
            # - building-backend:
            #     requires:
            #         - testing-backend
            # - building-frontend:
            #     requires:
            #         - testing-frontend
            #         - building-backend

            # Running Infrastructure Jobs
            - creating-infrastructure

            # Running Configuration Jobs
            - creating-inventory:
                requires:
                      - creating-infrastructure
            - configuring-infrastructure:
                  requires:
                      - creating-inventory

