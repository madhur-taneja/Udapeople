version: 2.1
orbs:
    node: circleci/node@1.1.6

# Common commands among jobs 
commands:
    # Destroying Infrastructure
    rollback-infrastructure:
        steps:
        # - run:
        #     when: on_fail
        #     name: "Destroying Cloudfront and Network infrastructure"
        #     command: |
        #         aws cloudformation delete-stack --stack-name network-stack
        #         aws cloudformation delete-stack --stack-name cloudfront-stack
        - run:
            when: on_fail
            name: "Destroying Frontend & Backend infrastructure"
            command: |
                aws cloudformation delete-stack --stack-name backend-stack
                aws cloudformation delete-stack --stack-name frontend-stack

    # Reverting Database Migration
    rollback-database:
        steps:
        - run:
            when: on_fail
            name: "Database Rollback to previous migration"
            command: |
                cd backend && npm i
                if (( $( curl -H "token: 2998145a-3ac8-4ec1-b0e5-2fdd9f3bcde6" --request GET https://api.memstash.io/values/migrations ) == 0 ))
                then 
                npm run migrations:revert
                echo "Reverting migrations"
                else
                echo "Migrations not reverted"
                fi
        - run:
            when: on_fail
            name: "Halting the workflow"
            command: |
                circleci-agent step halt

jobs:
    # Smoke Testing Services
    smoke-test:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: "Backend Smoke Test"
                command: |
                    API_HOST=$(curl -H "token: c20424ec-3f12-4c18-87f3-4ce676c7e8ae" --request GET https://api.memstash.io/values/backend)     
                    export API_URL=http://$API_HOST:3030
                    if curl "http://${BACKEND_IP}:3030/api/status" | grep "statusCode"
                    then
                    return 1
                    else
                    return 0
                    fi
            - run:
                name: "Frontend Smoke Test"
                command: |
                    URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
                    if curl -s ${URL} | grep "Welcome"
                    then
                    return 1
                    else
                    return 0
                    fi
            - rollback-infrastructure
            - rollback-database

    # Configuring Frontend Infrastructure
    configuring-frontend-infrastructure:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: "Baking backend API_URL into the front-end"
                command: | 
                    API_HOST=$(curl -H "token: c20424ec-3f12-4c18-87f3-4ce676c7e8ae" --request GET https://api.memstash.io/values/backend)     
                    export API_URL=http://$API_HOST:3030
                    echo $API_URL >> frontend/.env
                    cd frontend && npm run build
            - run:
                name: "Installing AWS-CLI"
                command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
            - run:
                name: "Copying compiled files to the S3 Bucket"
                command: |
                    aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

    # Configuring Backend Infrastructure
    configuring-backend-infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["4d:91:21:13:be:f2:fb:51:78:7d:ff:8f:01:18:6c:21"] # You can get this ID in the section where you registered the SSH Key
            - run:
                name: Install dependencies
                command: |
                    apk add --update ansible # install the dependencies needed for your playbook
            - run:
                name: Install tar/gzip utility
                command: |
                    yum -y install tar gzip
            - attach_workspace:
                at: ~/project
            - run:
                name: "Configuring server"
                command: |
                    cat ./.circleci/ansible/inventory
                    pwd
                    cd .circleci/ansible && ansible-playbook -i inventory playbook.yml

    # Creating Inventory with new EC2's IP address
    creating-inventory:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Get the IP Address of the EC2 instance 
                command: |
                    echo -e "[web]\n" > ./.circleci/ansible/inventory
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --output text >> ./.circleci/ansible/inventory
                    cat ./.circleci/ansible/inventory
                    pwd
            - run:
                name: Storing the Backend IP Address to Memstash as Frontend needs it 
                command: |
                    ip_address=$(tail -n 1 ./.circleci/ansible/inventory)
                    echo $ip_address
                    curl -H "Content-Type: text/plain" -H "token: c20424ec-3f12-4c18-87f3-4ce676c7e8ae" --request PUT --data $ip_address https://api.memstash.io/values/backend
            - run:
                name: Install tar/gzip utility
                command: |
                    yum -y install tar gzip
            - persist_to_workspace:
                root: ~/project
                paths:
                    - ./.circleci/ansible/inventory

    # Creating Infrastructure
    creating-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            # - run:
            #     name: Ensure Network & Cloudfront infrastructure exist
            #     command: |
            #             aws cloudformation deploy \
            #                 --template-file ./.circleci/files/network.yml \
            #                 --stack-name udapeople-network-stack \
            #                 --parameter-overrides EnvironmentName=${UdaPeople-Env}
            #             aws cloudformation deploy \
            #                 --template-file ./.circleci/files/cloudfront.yml \
            #                 --stack-name udapeople-cloudfront-stack \
            #                 --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                name: Ensure Backend & Frontend infrastructure exist
                command: |
                        aws cloudformation deploy \
                            --template-file ./.circleci/files/backend.yml \
                            --stack-name udapeople-backend-stack \
                            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
                        aws cloudformation deploy \
                            --template-file ./.circleci/files/frontend.yml \
                            --stack-name udapeople-frontend-stack \
                            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
            - rollback-infrastructure
            

    # Analyzing Code
    analyzing-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: cd backend && npm i && npm audit fix --audit-level=critical --force
    analyzing-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: cd frontend && npm i && npm audit fix --audit-level=critical --force

    # Testing Code
    testing-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: cd frontend && npm i && npm run test

    testing-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: cd backend && npm i && npm run test

    # Building Code
    building-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: cd frontend && npm i && npm run build
            - persist_to_workspace:
                root: ~/project
                paths:
                    - frontend/dist

    building-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: cd backend && npm i && npm run build
            - persist_to_workspace:
                root: ~/project
                paths:
                    - backend/dist

workflows:
    analyzing-testing-building-deploying:
        jobs:
            # Running Analysis Jobs
            # - analyzing-backend
            # - analyzing-frontend

            # Running Test Jobs
            # - testing-frontend:
            #     requires:
            #         - analyzing-frontend
            # - testing-backend:
            #     requires:
            #         - analyzing-backend

            # Running Build Jobs
            # - building-backend:
            #     requires:
            #         - testing-backend
            # - building-frontend:
                # requires:
                #     - testing-frontend
                #     - building-backend

            # Running Infrastructure Jobs
            - creating-infrastructure
            #     requires:
            #         - building-frontend
            - creating-inventory:
                requires:
                    - creating-infrastructure
            - configuring-backend-infrastructure:
                requires:
                    - creating-inventory
            - configuring-frontend-infrastructure:
                requires:
                    - configuring-backend-infrastructure